import { POST, GET } from '../route';
import { NextRequest } from 'next/server';

// Mock the postgres module
const mockQuery = jest.fn();
jest.mock('@/app/lib/postgres', () => ({
  query: mockQuery
}));

describe('/api/adjustments', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('POST', () => {
    it('should save adjustment with valid data', async () => {
      const mockResult = {
        rows: [{
          id: 1,
          adjustment_value: 5.0,
          filter_context: { states: ['TX'], inventoryItemId: 'item1' },
          inventory_item_name: 'Test Item',
          created_at: '2025-01-01T00:00:00Z'
        }]
      };

      mockQuery.mockResolvedValue(mockResult);

      const request = new NextRequest('http://localhost:3000/api/adjustments', {
        method: 'POST',
        body: JSON.stringify({
          adjustmentValue: 5.0,
          filterContext: { states: ['TX'], inventoryItemId: 'item1' },
          inventoryItemName: 'Test Item'
        }),
      });

      const response = await POST(request);
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data.success).toBe(true);
      expect(data.adjustment).toEqual({
        id: 1,
        adjustmentValue: 5.0,
        filterContext: { states: ['TX'], inventoryItemId: 'item1' },
        inventoryItemName: 'Test Item',
        timestamp: '2025-01-01T00:00:00Z'
      });

      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining('INSERT INTO forecast_adjustments'),
        [5.0, '{"states":["TX"],"inventoryItemId":"item1"}', 'Test Item']
      );
    });

    it('should return 400 for missing adjustment value', async () => {
      const request = new NextRequest('http://localhost:3000/api/adjustments', {
        method: 'POST',
        body: JSON.stringify({
          filterContext: { states: ['TX'] }
        }),
      });

      const response = await POST(request);
      const data = await response.json();

      expect(response.status).toBe(400);
      expect(data.error).toBe('Adjustment value is required and must be a number');
    });

    it('should return 400 for missing filter context', async () => {
      const request = new NextRequest('http://localhost:3000/api/adjustments', {
        method: 'POST',
        body: JSON.stringify({
          adjustmentValue: 5.0
        }),
      });

      const response = await POST(request);
      const data = await response.json();

      expect(response.status).toBe(400);
      expect(data.error).toBe('Filter context is required');
    });

    it('should handle database errors', async () => {
      mockQuery.mockRejectedValue(new Error('Database error'));

      const request = new NextRequest('http://localhost:3000/api/adjustments', {
        method: 'POST',
        body: JSON.stringify({
          adjustmentValue: 5.0,
          filterContext: { states: ['TX'] }
        }),
      });

      const response = await POST(request);
      const data = await response.json();

      expect(response.status).toBe(500);
      expect(data.error).toBe('Failed to save adjustment');
    });
  });

  describe('GET', () => {
    it('should return adjustment history', async () => {
      const mockResult = {
        rows: [
          {
            id: 1,
            adjustment_value: 5.0,
            filter_context: { states: ['TX'] },
            inventory_item_name: 'Test Item',
            created_at: '2025-01-01T00:00:00Z'
          },
          {
            id: 2,
            adjustment_value: -2.5,
            filter_context: { states: ['CA'] },
            inventory_item_name: 'Another Item',
            created_at: '2025-01-02T00:00:00Z'
          }
        ]
      };

      mockQuery.mockResolvedValue(mockResult);

      const response = await GET();
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data.adjustments).toEqual([
        {
          id: 1,
          adjustmentValue: 5.0,
          filterContext: { states: ['TX'] },
          inventoryItemName: 'Test Item',
          timestamp: '2025-01-01T00:00:00Z'
        },
        {
          id: 2,
          adjustmentValue: -2.5,
          filterContext: { states: ['CA'] },
          inventoryItemName: 'Another Item',
          timestamp: '2025-01-02T00:00:00Z'
        }
      ]);

      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining('SELECT id, adjustment_value, filter_context'),
        undefined
      );
    });

    it('should handle database errors on GET', async () => {
      mockQuery.mockRejectedValue(new Error('Database error'));

      const response = await GET();
      const data = await response.json();

      expect(response.status).toBe(500);
      expect(data.error).toBe('Failed to fetch adjustments');
    });

    it('should return empty array when no adjustments exist', async () => {
      const mockResult = { rows: [] };
      mockQuery.mockResolvedValue(mockResult);

      const response = await GET();
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data.adjustments).toEqual([]);
    });
  });
});
