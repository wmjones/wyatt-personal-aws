name: Terraform Deployment

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

permissions:
  contents: read
  pull-requests: write

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format and Linting
        id: fmt
        run: |
          chmod +x scripts/lint-and-tasks.sh
          # Run lint-and-tasks with the appropriate environment based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            scripts/lint-and-tasks.sh prod
          else
            scripts/lint-and-tasks.sh dev
          fi

      - name: Terraform Init
        id: init
        run: |
          cd main
          terraform init

      - name: Terraform Validate
        id: validate
        run: |
          cd main
          terraform validate -no-color

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: main

  plan:
    name: Plan
    needs: validate
    runs-on: ubuntu-latest
    # Map GitHub branches to environments
    env:
      TF_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || (github.ref == 'refs/heads/dev' && 'dev' || 'dev') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: |
          cd main
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          chmod +x scripts/deploy.sh
          cd main
          ../scripts/deploy.sh $TF_ENVIRONMENT plan

      - name: Publish Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "Terraform plan for ${{ env.TF_ENVIRONMENT }} environment"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for \`${{ env.TF_ENVIRONMENT }}\` environment

            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply:
    name: Apply
    needs: plan
    runs-on: ubuntu-latest
    # Only run apply for pushes to main branches, not PRs
    if: github.event_name == 'push'
    env:
      TF_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || (github.ref == 'refs/heads/dev' && 'dev' || 'dev') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: |
          cd main
          terraform init

      # For automatic apply on push to branches
      - name: Terraform Apply
        run: |
          chmod +x scripts/deploy.sh
          cd main
          ../scripts/deploy.sh $TF_ENVIRONMENT apply
