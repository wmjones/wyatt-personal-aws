name: Sync Neon Config to AWS SSM

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync'
        required: true
        type: choice
        options:
          - dev
          - prod

jobs:
  sync-config:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: us-east-2

      - name: Store Neon credentials in SSM
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
        run: |
          echo "Storing Neon configuration in SSM for ${ENVIRONMENT} environment..."

          # Store API key as SecureString
          aws ssm put-parameter \
            --name "/forecast-sync/${ENVIRONMENT}/neon-api-key" \
            --value "${{ secrets.NEON_API_KEY }}" \
            --type "SecureString" \
            --overwrite \
            --description "Neon API key for forecast sync Lambda" \
            --tags "Key=Environment,Value=${ENVIRONMENT}" "Key=Service,Value=forecast-sync" \
            || { echo "Failed to store Neon API key"; exit 1; }

          # Store project ID as regular String
          aws ssm put-parameter \
            --name "/forecast-sync/${ENVIRONMENT}/neon-project-id" \
            --value "${{ secrets.NEON_PROJECT_ID }}" \
            --type "String" \
            --overwrite \
            --description "Neon project ID for forecast sync Lambda" \
            --tags "Key=Environment,Value=${ENVIRONMENT}" "Key=Service,Value=forecast-sync" \
            || { echo "Failed to store Neon project ID"; exit 1; }

          echo "✅ Successfully stored Neon configuration in SSM for ${ENVIRONMENT} environment"

      - name: Verify parameters
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
        run: |
          echo "Verifying stored parameters..."

          # Check if parameters exist
          aws ssm describe-parameters \
            --parameter-filters "Key=Name,Option=BeginsWith,Values=/forecast-sync/${ENVIRONMENT}/" \
            --query "Parameters[*].[Name,Type,LastModifiedDate]" \
            --output table

          echo "✅ Parameter verification complete"
