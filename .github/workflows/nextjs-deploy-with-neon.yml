name: Deploy Next.js to Vercel with Branch-based Neon Setup

# This workflow creates Neon database branches for each branch deployment
# and sets branch-specific environment variables in Vercel for Git-connected projects
#
# IMPORTANT: This workflow assumes your Vercel project is Git-connected.
# Branch-specific environment variables are set in Vercel and automatically
# applied to deployments based on Git branch metadata.

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
    paths:
      - 'src/frontend/nextjs-app/**'
      - '.github/workflows/nextjs-deploy-with-neon.yml'

env:
  VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID || secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID || secrets.VERCEL_PROJECT_ID }}

# Concurrency control to prevent multiple deployments for the same branch
concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy-branch:
    name: Deploy Branch with Neon Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4

      # Step 2: Get branch name
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

      # Step 3: Debug - Check if secrets are available
      - name: Check secrets availability
        run: |
          if [ -z "${{ secrets.NEON_API_KEY }}" ]; then
            echo "❌ NEON_API_KEY is not set in GitHub secrets"
            echo "Please add NEON_API_KEY to your repository secrets"
            exit 1
          else
            echo "✅ NEON_API_KEY is available"
          fi
          if [ -z "${{ secrets.NEON_PROJECT_ID }}" ]; then
            echo "❌ NEON_PROJECT_ID is not set in GitHub secrets"
            echo "Please add NEON_PROJECT_ID to your repository secrets"
            exit 1
          else
            echo "✅ NEON_PROJECT_ID is available (value: ${{ secrets.NEON_PROJECT_ID }})"
          fi

      # Step 4: Sanitize branch name for Neon
      - name: Sanitize branch name
        id: sanitize_branch
        run: |
          # Sanitize branch name for Neon (replace invalid chars with hyphens, lowercase)
          SANITIZED_BRANCH=$(echo "${{ steps.branch_name.outputs.current_branch }}" | sed 's/[^a-zA-Z0-9.-]/-/g' | tr '[:upper:]' '[:lower:]')
          # Remove leading/trailing hyphens and limit length to 63 chars
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/^-\+\|-\+$//g' | cut -c1-63)
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "Original: ${{ steps.branch_name.outputs.current_branch }}"
          echo "Sanitized: $SANITIZED_BRANCH"

      # Step 5: Create Neon Branch
      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: branch/${{ steps.sanitize_branch.outputs.sanitized_branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
          username: neondb_owner
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}

      # Step 6: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: src/frontend/nextjs-app/package-lock.json

      # Step 7: Install dependencies
      - name: Install dependencies
        working-directory: src/frontend/nextjs-app
        run: npm ci

      # Step 8: Run linter
      - name: Run linter
        id: lint
        working-directory: src/frontend/nextjs-app
        run: npm run lint
        continue-on-error: true

      # Step 9: Run type check
      - name: Run type check
        id: typecheck
        working-directory: src/frontend/nextjs-app
        run: npx tsc --noEmit
        continue-on-error: true

      # Step 10: Code Quality Check Results
      - name: Code Quality Check Results
        if: steps.lint.outcome == 'failure' || steps.typecheck.outcome == 'failure'
        run: |
          echo "## ❌ Code Quality Issues Found"
          if [ "${{ steps.lint.outcome }}" == "failure" ]; then
            echo "- Linting failed"
          fi
          if [ "${{ steps.typecheck.outcome }}" == "failure" ]; then
            echo "- Type checking failed"
          fi
          echo ""
          echo "Please fix these issues before deployment."
          exit 1

      # Step 11: Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # Step 11a: Check if Environment Variables Already Set
      - name: Check Existing Environment Variables
        if: steps.branch_name.outputs.current_branch != 'dev' && steps.branch_name.outputs.current_branch != 'main'
        id: check_env_vars
        working-directory: src/frontend/nextjs-app
        run: |
          BRANCH_NAME="${{ steps.branch_name.outputs.current_branch }}"
          VARS_EXIST=true

          echo "Checking if branch-specific variables already exist..."

          # Check each required variable
          for VAR in DATABASE_URL DATABASE_URL_UNPOOLED DEPLOYMENT_BRANCH; do
            if ! vercel env ls preview --token=${{ secrets.VERCEL_TOKEN }} | grep -E "^$VAR.*$BRANCH_NAME" > /dev/null 2>&1; then
              echo "  ✗ $VAR not found"
              VARS_EXIST=false
            else
              echo "  ✓ $VAR exists"
            fi
          done

          if [ "$VARS_EXIST" = "true" ]; then
            echo "✅ All environment variables already set for branch $BRANCH_NAME"
            echo "skip_env_setup=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Some environment variables missing, will set them up"
            echo "skip_env_setup=false" >> $GITHUB_OUTPUT
          fi

      # Step 11b: Set Branch-Specific Environment Variables in Vercel
      - name: Set Branch-Specific Environment Variables
        if: steps.branch_name.outputs.current_branch != 'dev' && steps.branch_name.outputs.current_branch != 'main' && steps.check_env_vars.outputs.skip_env_setup != 'true'
        working-directory: src/frontend/nextjs-app
        run: |
          echo "Setting branch-specific environment variables in Vercel..."
          BRANCH_NAME="${{ steps.branch_name.outputs.current_branch }}"

          # Function to check if variable exists with correct value
          check_env_exists() {
            local VAR_NAME=$1
            local BRANCH=$2

            # Check if variable exists for this branch
            vercel env ls preview --token=${{ secrets.VERCEL_TOKEN }} | grep -E "^$VAR_NAME.*$BRANCH" > /dev/null 2>&1
            return $?
          }

          # Function to set or update environment variable
          set_or_update_env() {
            local VAR_NAME=$1
            local VAR_VALUE=$2
            local BRANCH=$3

            # Check if variable already exists
            if check_env_exists "$VAR_NAME" "$BRANCH"; then
              echo "ℹ️ $VAR_NAME already exists for branch $BRANCH"
              # Try to update by removing and re-adding
              echo "  Updating value..."
              vercel env rm "$VAR_NAME" preview "$BRANCH" --yes --token=${{ secrets.VERCEL_TOKEN }} 2>/dev/null || true
            fi

            # Add the value
            echo "$VAR_VALUE" | vercel env add "$VAR_NAME" preview "$BRANCH" --token=${{ secrets.VERCEL_TOKEN }} 2>&1 | {
              while IFS= read -r line; do
                if [[ "$line" == *"already exists"* ]]; then
                  echo "  ⚠️ $VAR_NAME already exists and couldn't be updated - this is OK if the value is correct"
                  return 0
                else
                  echo "  $line"
                fi
              done
              echo "  ✓ $VAR_NAME set successfully"
            }
          }

          # Set DATABASE_URL for the specific branch
          echo "Processing DATABASE_URL..."
          set_or_update_env "DATABASE_URL" "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" "$BRANCH_NAME"

          # Set DATABASE_URL_UNPOOLED for the specific branch
          echo "Processing DATABASE_URL_UNPOOLED..."
          set_or_update_env "DATABASE_URL_UNPOOLED" "${{ steps.create_neon_branch.outputs.db_url }}" "$BRANCH_NAME"

          # Set DEPLOYMENT_BRANCH for tracking
          echo "Processing DEPLOYMENT_BRANCH..."
          set_or_update_env "DEPLOYMENT_BRANCH" "$BRANCH_NAME" "$BRANCH_NAME"

          echo ""
          echo "✅ Branch-specific environment variables processing complete"
          echo "Note: Warnings about existing variables are expected and can be ignored"

      # Step 12: Pull Vercel Environment Information
      - name: Pull Vercel Environment Information
        working-directory: src/frontend/nextjs-app
        run: |
          # Determine environment type based on branch
          CURRENT_BRANCH="${{ steps.branch_name.outputs.current_branch }}"
          if [ "$CURRENT_BRANCH" = "dev" ] || [ "$CURRENT_BRANCH" = "main" ]; then
            echo "Pulling production environment information..."
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "Pulling preview environment information for branch: $CURRENT_BRANCH"
            vercel pull --yes --environment=preview --git-branch="$CURRENT_BRANCH" --token=${{ secrets.VERCEL_TOKEN }}
          fi

      # Step 13: Build Project
      - name: Build Project Artifacts
        working-directory: src/frontend/nextjs-app
        env:
          # Pass database URLs during build
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          DATABASE_URL_UNPOOLED: ${{ steps.create_neon_branch.outputs.db_url }}
        run: |
          # Determine build type based on branch
          CURRENT_BRANCH="${{ steps.branch_name.outputs.current_branch }}"
          if [ "$CURRENT_BRANCH" = "dev" ] || [ "$CURRENT_BRANCH" = "main" ]; then
            echo "Building for production deployment..."
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "Building for preview deployment..."
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi

      # Step 14: Log Environment Configuration for Git-Connected Project
      - name: Log Environment Configuration
        if: steps.branch_name.outputs.current_branch != 'dev' && steps.branch_name.outputs.current_branch != 'main'
        run: |
          echo "✅ Git-connected project - Branch-specific environment variables"
          echo "Branch: ${{ steps.branch_name.outputs.current_branch }}"
          echo "Database Branch: branch/${{ steps.sanitize_branch.outputs.sanitized_branch }}"
          echo "Environment variables set in Vercel for this branch"

      # Step 15: Verify Environment Setup
      - name: Verify Environment Setup
        run: |
          # Log the environment configuration for transparency
          CURRENT_BRANCH="${{ steps.branch_name.outputs.current_branch }}"
          if [ "$CURRENT_BRANCH" = "dev" ] || [ "$CURRENT_BRANCH" = "main" ]; then
            echo "✅ Production deployment - using environment variables from Vercel dashboard"
          else
            echo "✅ Preview deployment - using branch-specific environment variables"
            echo "Branch: ${{ steps.branch_name.outputs.current_branch }}"
            echo "Database Branch: branch/${{ steps.sanitize_branch.outputs.sanitized_branch }}"
            echo "Git-connected project with automatic branch association"
          fi

      # Step 16: Deploy to Vercel
      - name: Deploy to Vercel
        id: deploy
        working-directory: src/frontend/nextjs-app
        run: |
          # Determine deployment type based on branch
          CURRENT_BRANCH="${{ steps.branch_name.outputs.current_branch }}"
          echo "Current branch: $CURRENT_BRANCH"

          if [ "$CURRENT_BRANCH" = "dev" ]; then
            echo "🚀 Deploying dev branch as production deployment..."
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
            echo "Production URL: $DEPLOYMENT_URL"
            echo "deployment_type=production" >> $GITHUB_OUTPUT
            echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "alias=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_BRANCH" = "main" ]; then
            echo "🚀 Deploying main branch as production deployment..."
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
            echo "Production URL: $DEPLOYMENT_URL"
            echo "deployment_type=production" >> $GITHUB_OUTPUT
            echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "alias=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          else
            echo "🔄 Deploying feature branch as preview deployment..."
            # Deploy using Git metadata for branch association
            DEPLOYMENT_URL=$(vercel deploy --prebuilt \
              --meta githubDeployment="1" \
              --meta githubCommitRef="${{ steps.branch_name.outputs.current_branch }}" \
              --token=${{ secrets.VERCEL_TOKEN }})
            echo "Preview URL: $DEPLOYMENT_URL"
            echo "deployment_type=preview" >> $GITHUB_OUTPUT
            echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

            # Set alias for easier access using sanitized branch name
            ALIAS="${{ steps.sanitize_branch.outputs.sanitized_branch }}-${{ github.repository_owner }}.vercel.app"
            vercel alias set $DEPLOYMENT_URL $ALIAS --token=${{ secrets.VERCEL_TOKEN }} || true
            echo "alias=https://$ALIAS" >> $GITHUB_OUTPUT
          fi

      # Step 17: Run Database Migrations
      - name: Run Database Migrations
        working-directory: src/frontend/nextjs-app
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          DATABASE_URL_UNPOOLED: ${{ steps.create_neon_branch.outputs.db_url }}
        run: |
          npx tsx scripts/migrate-only.ts || {
            echo "⚠️ Migration failed. This may be due to the database not being ready yet."
            echo "You can manually run migrations later if needed."
          }

      # Step 18: Log deployment info
      - name: Log deployment info
        run: |
          echo "## 🚀 Branch Deployment Complete!"
          echo "Branch: ${{ steps.branch_name.outputs.current_branch }}"
          echo "Deployment Type: ${{ steps.deploy.outputs.deployment_type }}"
          echo "Sanitized: ${{ steps.sanitize_branch.outputs.sanitized_branch }}"
          echo "Deployment URL: ${{ steps.deploy.outputs.url }}"
          if [ "${{ steps.deploy.outputs.deployment_type }}" = "preview" ]; then
            echo "Alias URL: ${{ steps.deploy.outputs.alias }}"
          fi
          echo "Database Branch: branch/${{ steps.sanitize_branch.outputs.sanitized_branch }}"
          echo "Lint Status: ${{ steps.lint.outcome }}"
          echo "Type Check Status: ${{ steps.typecheck.outcome }}"
