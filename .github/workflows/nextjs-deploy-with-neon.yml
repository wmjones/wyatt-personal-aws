name: Deploy Next.js to Vercel with Neon Branch

# This workflow creates Neon database branches for all deployment types:
# - Preview deployments: Create temporary branches for PRs (auto-cleanup on PR close)
# - Dev deployments: Create persistent dev branches with database migrations
# - Production deployments: Create production branches with database migrations
# All deployments use dynamic Neon branch URLs instead of hardcoded environment variables

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'src/frontend/nextjs-app/**'
      - '.github/workflows/nextjs-deploy-with-neon.yml'
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'src/frontend/nextjs-app/**'
      - '.github/workflows/nextjs-deploy-with-neon.yml'

env:
  VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID || secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID || secrets.VERCEL_PROJECT_ID }}

# Concurrency control to prevent multiple deployments for the same PR
concurrency:
  group: preview-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

  deploy-preview:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      # Step 1: Create Neon Branch with timeout
      - name: Create Neon Branch
        id: create_neon_branch
        timeout-minutes: 5
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
          username: neondb_owner

      # Step 1.5: Verify Neon outputs
      - name: Verify Neon outputs
        run: |
          if [ -z "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" ]; then
            echo "Error: db_url_with_pooler is empty"
            exit 1
          fi
          if [ -z "${{ steps.create_neon_branch.outputs.db_url }}" ]; then
            echo "Error: db_url is empty"
            exit 1
          fi
          echo "‚úÖ Neon branch created successfully with valid database URLs"

      # Step 2: Checkout code
      - uses: actions/checkout@v4

      # Step 3: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: src/frontend/nextjs-app/package-lock.json

      # Step 4: Install dependencies (includes Vercel CLI)
      - name: Install dependencies
        working-directory: src/frontend/nextjs-app
        run: npm ci

      # Step 5: Run linter and type check
      - name: Run linter
        working-directory: src/frontend/nextjs-app
        run: npm run lint

      - name: Run type check
        working-directory: src/frontend/nextjs-app
        run: npx tsc --noEmit

      # Step 6: Pull Vercel Environment
      - name: Pull Vercel Environment Information
        working-directory: src/frontend/nextjs-app
        run: npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      # Step 7: Build with environment variables
      - name: Build Project Artifacts
        working-directory: src/frontend/nextjs-app
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          DATABASE_URL_UNPOOLED: ${{ steps.create_neon_branch.outputs.db_url }}
        run: |
          npx vercel build --token=${{ secrets.VERCEL_TOKEN }}

      # Step 8: Deploy with improved URL capture and alias
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        working-directory: src/frontend/nextjs-app
        run: |
          # Deploy and capture URL
          DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} \
            --env DATABASE_URL="${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" \
            --env DATABASE_URL_UNPOOLED="${{ steps.create_neon_branch.outputs.db_url }}")

          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Preview URL: $DEPLOYMENT_URL"

          # Set alias for easier access
          ALIAS="pr-${{ github.event.number }}-${{ github.repository_owner }}.vercel.app"
          npx vercel alias set $DEPLOYMENT_URL $ALIAS --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "alias=https://$ALIAS" >> $GITHUB_OUTPUT

      # Step 9: Run Database Migrations with error handling
      - name: Run Database Migrations
        working-directory: src/frontend/nextjs-app
        timeout-minutes: 10
        run: |
          # Use npx instead of global install
          npx tsx scripts/init-database.ts || {
            echo "‚ö†Ô∏è Migration failed. Check logs above."
            echo "This may be due to the database not being ready yet."
            echo "You can manually run migrations later if needed."
            exit 1
          }
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          DATABASE_URL_UNPOOLED: ${{ steps.create_neon_branch.outputs.db_url }}
          NEXT_PUBLIC_AWS_REGION: us-east-2
          NEXT_PUBLIC_USER_POOL_ID: us-east-2_FebjdKLG3
          NEXT_PUBLIC_USER_POOL_CLIENT_ID: 3i464fgdtarund735fjc0b5b6c
          AWS_API_GATEWAY_URL: https://v1zx8vrzzj.execute-api.us-east-2.amazonaws.com
          NODE_ENV: development

      # Step 10: Comment with enhanced security (no database URLs)
      - name: Comment PR with Preview Info
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.url }}';
            const alias = '${{ steps.deploy.outputs.alias }}';
            const body = `üöÄ **Preview deployment ready!**

            **Preview URL**: ${url}
            ${alias ? `**Alias URL**: ${alias}` : ''}

            üóÑÔ∏è **Database Branch**: \`preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}\`

            The preview includes a dedicated database branch with all schema migrations applied.

            üí° **For local development**:
            Run \`neon branches get preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}\` to get connection details.

            üìä **Deployment Details**:
            - Build completed successfully
            - Database migrations applied
            - Environment: Preview`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Enhanced cleanup with error handling
  cleanup-preview:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        continue-on-error: true  # Don't fail if branch doesn't exist
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Add cleanup comment
        uses: actions/github-script@v7
        with:
          script: |
            const body = `üóëÔ∏è **Preview Cleaned Up**

            The preview database branch \`preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}\` has been deleted.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  # Matrix strategy for dev and production deployments
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          - branch: dev
            ref: refs/heads/dev
            environment: preview
            prod_flag: ""
          - branch: main
            ref: refs/heads/main
            environment: production
            prod_flag: "--prod"
    steps:
      - uses: actions/checkout@v4
        if: github.ref == matrix.ref

      # Create Neon Branch for dev and production deployments
      - name: Create Neon Branch
        if: github.ref == matrix.ref
        id: create_neon_branch
        timeout-minutes: 5
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: ${{ matrix.branch }}-deployment-${{ github.sha }}
          api_key: ${{ secrets.NEON_API_KEY }}
          username: neondb_owner

      # Verify Neon outputs
      - name: Verify Neon outputs
        if: github.ref == matrix.ref
        run: |
          if [ -z "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" ]; then
            echo "Error: db_url_with_pooler is empty"
            exit 1
          fi
          if [ -z "${{ steps.create_neon_branch.outputs.db_url }}" ]; then
            echo "Error: db_url is empty"
            exit 1
          fi
          echo "‚úÖ ${{ matrix.branch }} Neon branch created successfully with valid database URLs"

      - name: Setup Node.js
        if: github.ref == matrix.ref
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: src/frontend/nextjs-app/package-lock.json

      - name: Cache Vercel CLI
        if: github.ref == matrix.ref
        id: cache-vercel
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-vercel-cli-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: github.ref == matrix.ref
        working-directory: src/frontend/nextjs-app
        run: npm ci

      - name: Run linter
        if: github.ref == matrix.ref
        working-directory: src/frontend/nextjs-app
        run: npm run lint

      - name: Run type check
        if: github.ref == matrix.ref
        working-directory: src/frontend/nextjs-app
        run: npx tsc --noEmit


      - name: Pull Vercel Environment Information
        if: github.ref == matrix.ref
        working-directory: src/frontend/nextjs-app
        run: npx vercel pull --yes --environment=${{ matrix.environment }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        if: github.ref == matrix.ref
        working-directory: src/frontend/nextjs-app
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          DATABASE_URL_UNPOOLED: ${{ steps.create_neon_branch.outputs.db_url }}
        run: npx vercel build ${{ matrix.prod_flag }} --token=${{ secrets.VERCEL_TOKEN }}

      # Run Database Migrations before deployment
      - name: Run Database Migrations
        if: github.ref == matrix.ref
        working-directory: src/frontend/nextjs-app
        timeout-minutes: 10
        run: |
          # Use npx instead of global install
          npx tsx scripts/init-database.ts || {
            echo "‚ö†Ô∏è Migration failed for ${{ matrix.branch }}. Check logs above."
            echo "This may be due to the database not being ready yet."
            echo "You can manually run migrations later if needed."
            exit 1
          }
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          DATABASE_URL_UNPOOLED: ${{ steps.create_neon_branch.outputs.db_url }}
          NEXT_PUBLIC_AWS_REGION: us-east-2
          NEXT_PUBLIC_USER_POOL_ID: us-east-2_FebjdKLG3
          NEXT_PUBLIC_USER_POOL_CLIENT_ID: 3i464fgdtarund735fjc0b5b6c
          AWS_API_GATEWAY_URL: https://v1zx8vrzzj.execute-api.us-east-2.amazonaws.com
          NODE_ENV: ${{ matrix.branch == 'main' && 'production' || 'development' }}

      - name: Deploy Project Artifacts to Vercel
        if: github.ref == matrix.ref
        id: deploy
        working-directory: src/frontend/nextjs-app
        run: |
          echo "Deploying to Vercel ${{ matrix.branch }} environment..."
          # Deploy with Neon branch database URLs for both dev and prod
          DEPLOYMENT_URL=$(npx vercel deploy --prebuilt ${{ matrix.prod_flag }} --token=${{ secrets.VERCEL_TOKEN }} \
            --env DATABASE_URL="${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" \
            --env DATABASE_URL_UNPOOLED="${{ steps.create_neon_branch.outputs.db_url }}")
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "${{ matrix.branch }} deployment URL: $DEPLOYMENT_URL"

      - name: Create deployment summary
        if: github.ref == matrix.ref
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ matrix.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Branch**: \`${{ matrix.branch }}-deployment-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Migrations**: ‚úÖ Applied" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY

  # Note: Branch cleanup is now handled by the dedicated neon-branch-cleanup.yml workflow
  # which runs on schedule and can be triggered manually
