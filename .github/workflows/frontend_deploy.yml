name: Deploy Frontend React App

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'src/frontend/react-app/**'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read   # Required for actions/checkout

env:
  AWS_REGION: 'us-east-2'  # Update to match your S3 bucket region
  NODE_VERSION: '18'
  NPM_VERSION: '8.19.3'  # Use a specific npm version for better compatibility
  ENVIRONMENT: >-
    ${{
      github.ref == 'refs/heads/main' && 'prod' ||
      'dev'
    }}

jobs:
  deploy:
    name: Build and Deploy React App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Don't use npm cache since package-lock.json is gitignored

      - name: Install specific npm version
        run: npm install -g npm@${{ env.NPM_VERSION }}

      - name: Install dependencies
        working-directory: src/frontend/react-app
        run: |
          npm install --no-save ajv@8.12.0 ajv-keywords@5.1.0
          npm install

      - name: Set environment variable
        run: |
          echo "REACT_APP_STAGE=${{ env.ENVIRONMENT }}" >> src/frontend/react-app/.env.production.local
          echo "REACT_APP_REGION=${{ env.AWS_REGION }}" >> src/frontend/react-app/.env.production.local
          echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV

      - name: Build React app
        working-directory: src/frontend/react-app
        run: CI=false npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket name
        id: get-bucket
        run: |
          # Use AWS CLI to get the output value from CloudFormation/SSM parameter
          BUCKET_NAME=$(aws ssm get-parameter --name "/wyatt-personal-aws-${{ env.ENVIRONMENT }}/frontend_bucket_name" --query "Parameter.Value" --output text)
          echo "s3_bucket=${BUCKET_NAME}" >> $GITHUB_OUTPUT

          # Get CloudFront distribution ID
          CF_ID=$(aws ssm get-parameter --name "/wyatt-personal-aws-${{ env.ENVIRONMENT }}/cloudfront_id" --query "Parameter.Value" --output text || echo '')
          if [ -n "$CF_ID" ]; then
            echo "cloudfront_id=${CF_ID}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy static assets to S3 with cache headers
        run: |
          echo "Deploying static assets to bucket: ${{ steps.get-bucket.outputs.s3_bucket }}"
          aws s3 sync src/frontend/react-app/build/ s3://${{ steps.get-bucket.outputs.s3_bucket }}/ \
            --delete \
            --cache-control "max-age=31536000,public" \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "*.txt" \
            --exclude "asset-manifest.json"

      - name: Deploy HTML, JSON, and config files with no-cache headers
        run: |
          echo "Deploying HTML and JSON files to bucket: ${{ steps.get-bucket.outputs.s3_bucket }}"
          aws s3 sync src/frontend/react-app/build/ s3://${{ steps.get-bucket.outputs.s3_bucket }}/ \
            --cache-control "max-age=0,no-cache,no-store,must-revalidate" \
            --include "*.html" \
            --include "*.json" \
            --include "*.txt" \
            --exclude "static/**/*"

      - name: Invalidate CloudFront cache
        if: steps.get-bucket.outputs.cloudfront_id != ''
        run: |
          echo "Invalidating CloudFront distribution: ${{ steps.get-bucket.outputs.cloudfront_id }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-bucket.outputs.cloudfront_id }} \
            --paths "/*"
