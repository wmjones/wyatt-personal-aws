name: Neon Branch Cleanup

# This workflow manages Neon database branch cleanup to prevent hitting branch limits
# It runs on:
# 1. PR close/merge - deletes preview branches
# 2. Branch deletion - deletes corresponding Neon branches
# 3. Schedule - weekly cleanup of old deployment branches
# 4. Manual trigger - for on-demand cleanup

on:
  # Trigger on PR events
  pull_request:
    types: [closed]

  # Trigger on branch deletion
  delete:
    branches:
      - '**'
      - '!main'
      - '!dev'

  # Weekly cleanup of old branches
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight

  # Manual trigger with options
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'old-deployments'
        type: choice
        options:
          - 'old-deployments'
          - 'all-preview'
          - 'specific-branch'
      branch_name:
        description: 'Specific branch name (only for specific-branch cleanup)'
        required: false

jobs:
  # Cleanup preview branches when PRs are closed
  cleanup-pr-branch:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Neon CLI
        run: |
          npm install -g neonctl@latest
          echo "‚úÖ Neon CLI installed"

      - name: Get PR branch name
        id: branch_info
        run: |
          # Extract branch name from PR
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "üìå PR branch: $BRANCH_NAME"

      - name: Delete Neon preview branch
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          # Construct the Neon branch name (for both old preview and new branch naming)
          NEON_BRANCH_OLD="preview/pr-${{ github.event.pull_request.number }}-${{ steps.branch_info.outputs.branch_name }}"
          NEON_BRANCH_NEW="branch/${{ steps.branch_info.outputs.branch_name }}"

          echo "üóëÔ∏è Attempting to delete Neon branches for PR branch: ${{ steps.branch_info.outputs.branch_name }}"

          # Try to delete both old and new naming patterns
          neonctl branches delete "$NEON_BRANCH_OLD" \
            --project-id "$NEON_PROJECT_ID" \
            --force || echo "‚ö†Ô∏è Old preview branch might not exist or already deleted"

          neonctl branches delete "$NEON_BRANCH_NEW" \
            --project-id "$NEON_PROJECT_ID" \
            --force || echo "‚ö†Ô∏è New branch might not exist or already deleted"

      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest
          echo "‚úÖ Vercel CLI installed"

      - name: Cleanup Vercel Preview Deployments
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID || secrets.VERCEL_ORG_ID }}
        run: |
          echo "üßπ Cleaning up Vercel deployments for PR branch: ${{ steps.branch_info.outputs.branch_name }}"

          # Skip cleanup for main and dev branches (these are production deployments)
          if [ "${{ steps.branch_info.outputs.branch_name }}" = "main" ] || [ "${{ steps.branch_info.outputs.branch_name }}" = "dev" ]; then
            echo "‚ö†Ô∏è Skipping cleanup for production branch: ${{ steps.branch_info.outputs.branch_name }}"
            exit 0
          fi

          # Sanitize branch name for deployment matching (same logic as deployment)
          SANITIZED_BRANCH=$(echo "${{ steps.branch_info.outputs.branch_name }}" | sed 's/[^a-zA-Z0-9.-]/-/g' | tr '[:upper:]' '[:lower:]')
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/^-\+\|-\+$//g' | cut -c1-63)

          # Get all deployments for this project and filter by branch
          DEPLOYMENTS=$(vercel ls --token=$VERCEL_TOKEN --scope=$VERCEL_ORG_ID | grep "$SANITIZED_BRANCH" || true)

          if [ -n "$DEPLOYMENTS" ]; then
            echo "Found deployments to clean up:"
            echo "$DEPLOYMENTS"

            # Extract deployment URLs and delete them
            echo "$DEPLOYMENTS" | while read -r line; do
              if [[ $line =~ $SANITIZED_BRANCH ]]; then
                DEPLOYMENT_URL=$(echo "$line" | awk '{print $2}')
                if [ -n "$DEPLOYMENT_URL" ]; then
                  echo "üóëÔ∏è Deleting deployment: $DEPLOYMENT_URL"
                  vercel rm "$DEPLOYMENT_URL" --yes --token=$VERCEL_TOKEN || true
                fi
              fi
            done

            echo "‚úÖ Vercel deployment cleanup completed"
          else
            echo "‚ÑπÔ∏è No Vercel deployments found for branch ${{ steps.branch_info.outputs.branch_name }}"
          fi
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const body = `üßπ **Branch Cleanup Complete**

            ‚úÖ **Neon Database**: Database branches for \`${{ steps.branch_info.outputs.branch_name }}\` have been cleaned up.
            ‚úÖ **Vercel Deployments**: Preview deployments for \`${{ steps.branch_info.outputs.branch_name }}\` have been removed.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  # Cleanup when branches are deleted
  cleanup-deleted-branch:
    if: github.event_name == 'delete' && github.event.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Neon CLI
        run: |
          npm install -g neonctl@latest
          echo "‚úÖ Neon CLI installed"

      - name: Get deleted branch name
        id: branch_info
        run: |
          # Extract the deleted branch name
          BRANCH_NAME="${{ github.event.ref }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "üìå Deleted branch: $BRANCH_NAME"

      - name: List and delete matching Neon branches
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          echo "üîç Looking for Neon branches related to: ${{ steps.branch_info.outputs.branch_name }}"

          # List all branches
          BRANCHES=$(neonctl branches list --project-id "$NEON_PROJECT_ID" --output json || echo "[]")

          # Sanitize branch name for Neon lookup
          SANITIZED_BRANCH=$(echo "${{ steps.branch_info.outputs.branch_name }}" | sed 's/[^a-zA-Z0-9.-]/-/g' | tr '[:upper:]' '[:lower:]')
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/^-\+\|-\+$//g' | cut -c1-63)

          # Find branches that match the deleted GitHub branch (both old and new naming patterns)
          BRANCH_TO_DELETE="branch/$SANITIZED_BRANCH"

          echo "üóëÔ∏è Attempting to delete Neon branch: $BRANCH_TO_DELETE"
          neonctl branches delete "$BRANCH_TO_DELETE" --project-id "$NEON_PROJECT_ID" --force || echo "‚ö†Ô∏è Branch might not exist or already deleted"

          # Also check for any old preview branches that might match
          echo "$BRANCHES" | jq -r '.[] | select(.name | contains("${{ steps.branch_info.outputs.branch_name }}")) | .name' | while read -r branch; do
            if [ ! -z "$branch" ] && [ "$branch" != "$BRANCH_TO_DELETE" ]; then
              echo "üóëÔ∏è Deleting related Neon branch: $branch"
              neonctl branches delete "$branch" --project-id "$NEON_PROJECT_ID" --force || true
            fi
          done

      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest
          echo "‚úÖ Vercel CLI installed"

      - name: Cleanup Vercel Preview Deployments
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID || secrets.VERCEL_ORG_ID }}
        run: |
          echo "üßπ Cleaning up Vercel deployments for deleted branch: ${{ steps.branch_info.outputs.branch_name }}"

          # Skip cleanup for main and dev branches (these are production deployments)
          if [ "${{ steps.branch_info.outputs.branch_name }}" = "main" ] || [ "${{ steps.branch_info.outputs.branch_name }}" = "dev" ]; then
            echo "‚ö†Ô∏è Skipping cleanup for production branch: ${{ steps.branch_info.outputs.branch_name }}"
            exit 0
          fi

          # Sanitize branch name for deployment matching (same logic as deployment)
          SANITIZED_BRANCH=$(echo "${{ steps.branch_info.outputs.branch_name }}" | sed 's/[^a-zA-Z0-9.-]/-/g' | tr '[:upper:]' '[:lower:]')
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/^-\+\|-\+$//g' | cut -c1-63)

          # Get all deployments for this project and filter by branch
          DEPLOYMENTS=$(vercel ls --token=$VERCEL_TOKEN --scope=$VERCEL_ORG_ID | grep "$SANITIZED_BRANCH" || true)

          if [ -n "$DEPLOYMENTS" ]; then
            echo "Found deployments to clean up:"
            echo "$DEPLOYMENTS"

            # Extract deployment URLs and delete them
            echo "$DEPLOYMENTS" | while read -r line; do
              if [[ $line =~ $SANITIZED_BRANCH ]]; then
                DEPLOYMENT_URL=$(echo "$line" | awk '{print $2}')
                if [ -n "$DEPLOYMENT_URL" ]; then
                  echo "üóëÔ∏è Deleting deployment: $DEPLOYMENT_URL"
                  vercel rm "$DEPLOYMENT_URL" --yes --token=$VERCEL_TOKEN || true
                fi
              fi
            done

            echo "‚úÖ Vercel deployment cleanup completed"
          else
            echo "‚ÑπÔ∏è No Vercel deployments found for branch ${{ steps.branch_info.outputs.branch_name }}"
          fi
        continue-on-error: true

  # Scheduled cleanup of old deployment branches
  cleanup-old-deployments:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.cleanup_type == 'old-deployments')
    runs-on: ubuntu-latest
    steps:
      - name: Setup Neon CLI
        run: |
          npm install -g neonctl@latest
          echo "‚úÖ Neon CLI installed"

      - name: Clean up old deployment branches
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          echo "üßπ Cleaning up old deployment branches..."

          # List all branches
          BRANCHES=$(neonctl branches list --project-id "$NEON_PROJECT_ID" --output json || echo "[]")

          # Get current timestamp (in seconds)
          CURRENT_TIME=$(date +%s)
          SEVEN_DAYS_AGO=$((CURRENT_TIME - 604800))  # 7 days in seconds

          # Process deployment branches
          for env in "dev" "main"; do
            echo "üìã Processing $env deployment branches..."

            # Get deployment branches for this environment, sorted by creation date
            DEPLOYMENT_BRANCHES=$(echo "$BRANCHES" | jq -r --arg env "$env" \
              '.[] | select(.name | test("^" + $env + "-deployment-")) |
              {name: .name, created_at: .created_at}' | jq -s 'sort_by(.created_at) | reverse')

            # Keep only the 5 most recent branches
            BRANCHES_TO_KEEP=5
            BRANCH_COUNT=$(echo "$DEPLOYMENT_BRANCHES" | jq length)

            if [ "$BRANCH_COUNT" -gt "$BRANCHES_TO_KEEP" ]; then
              echo "Found $BRANCH_COUNT $env deployment branches, keeping $BRANCHES_TO_KEEP most recent"

              # Get branches to delete (older than the 5 most recent)
              BRANCHES_TO_DELETE=$(echo "$DEPLOYMENT_BRANCHES" | jq -r ".[$BRANCHES_TO_KEEP:] | .[].name")

              for branch in $BRANCHES_TO_DELETE; do
                echo "üóëÔ∏è Deleting old deployment branch: $branch"
                neonctl branches delete "$branch" --project-id "$NEON_PROJECT_ID" --force || true
              done
            else
              echo "‚úÖ Only $BRANCH_COUNT $env deployment branches found, no cleanup needed"
            fi
          done

          # Also clean up any preview/branch branches older than 7 days (orphaned branches)
          echo "üìã Cleaning orphaned preview and branch deployments..."
          echo "$BRANCHES" | jq -r --argjson cutoff "$SEVEN_DAYS_AGO" \
            '.[] | select(.name | test("^(preview/|branch/)")) |
            select((.created_at | fromdateiso8601) < $cutoff) | .name' | while read -r branch; do
            if [ ! -z "$branch" ]; then
              echo "üóëÔ∏è Deleting orphaned branch: $branch"
              neonctl branches delete "$branch" --project-id "$NEON_PROJECT_ID" --force || true
            fi
          done

  # Manual cleanup options
  manual-cleanup:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Neon CLI
        run: |
          npm install -g neonctl@latest
          echo "‚úÖ Neon CLI installed"

      - name: Perform manual cleanup
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          CLEANUP_TYPE="${{ github.event.inputs.cleanup_type }}"

          case "$CLEANUP_TYPE" in
            "all-preview")
              echo "üßπ Cleaning up ALL preview and branch deployments..."
              neonctl branches list --project-id "$NEON_PROJECT_ID" --output json | \
                jq -r '.[] | select(.name | test("^(preview/|branch/)")) | .name' | while read -r branch; do
                if [ ! -z "$branch" ]; then
                  echo "üóëÔ∏è Deleting branch: $branch"
                  neonctl branches delete "$branch" --project-id "$NEON_PROJECT_ID" --force || true
                fi
              done
              ;;

            "specific-branch")
              BRANCH_NAME="${{ github.event.inputs.branch_name }}"
              if [ ! -z "$BRANCH_NAME" ]; then
                echo "üóëÔ∏è Deleting specific branch: $BRANCH_NAME"
                neonctl branches delete "$BRANCH_NAME" --project-id "$NEON_PROJECT_ID" --force || \
                  echo "‚ö†Ô∏è Branch not found or already deleted"
              else
                echo "‚ùå No branch name provided"
                exit 1
              fi
              ;;
          esac

      - name: Create summary
        run: |
          echo "## üßπ Neon Branch Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup Type**: ${{ github.event.inputs.cleanup_type }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.cleanup_type }}" = "specific-branch" ]; then
            echo "**Branch**: ${{ github.event.inputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Cleanup completed successfully" >> $GITHUB_STEP_SUMMARY

  # Monitor branch usage
  monitor-branch-usage:
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    needs: [cleanup-old-deployments, manual-cleanup]
    steps:
      - name: Setup Neon CLI
        run: |
          npm install -g neonctl@latest
          echo "‚úÖ Neon CLI installed"

      - name: Check branch usage
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
        run: |
          echo "üìä Checking Neon branch usage..."

          # Get project details including branch limit
          PROJECT_INFO=$(neonctl projects get "$NEON_PROJECT_ID" --output json)

          # Get current branch count
          BRANCHES=$(neonctl branches list --project-id "$NEON_PROJECT_ID" --output json)
          BRANCH_COUNT=$(echo "$BRANCHES" | jq length)

          # Extract branch limit (this might need adjustment based on actual API response)
          BRANCH_LIMIT=$(echo "$PROJECT_INFO" | jq '.branch_limit // 10')

          echo "üìà Branch usage: $BRANCH_COUNT / $BRANCH_LIMIT"

          # Calculate usage percentage
          USAGE_PERCENT=$((BRANCH_COUNT * 100 / BRANCH_LIMIT))

          # Create summary
          echo "## üìä Neon Branch Usage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Branches**: $BRANCH_COUNT / $BRANCH_LIMIT ($USAGE_PERCENT%)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Break down by type
          PREVIEW_COUNT=$(echo "$BRANCHES" | jq '[.[] | select(.name | test("^preview/"))] | length')
          BRANCH_COUNT_NEW=$(echo "$BRANCHES" | jq '[.[] | select(.name | test("^branch/"))] | length')
          DEV_COUNT=$(echo "$BRANCHES" | jq '[.[] | select(.name | test("^dev-deployment-"))] | length')
          MAIN_COUNT=$(echo "$BRANCHES" | jq '[.[] | select(.name | test("^main-deployment-"))] | length')
          OTHER_COUNT=$((BRANCH_COUNT - PREVIEW_COUNT - BRANCH_COUNT_NEW - DEV_COUNT - MAIN_COUNT))

          echo "### Branch Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "- **Legacy Preview Branches**: $PREVIEW_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch Deployments**: $BRANCH_COUNT_NEW" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Deployments**: $DEV_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Deployments**: $MAIN_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Other**: $OTHER_COUNT" >> $GITHUB_STEP_SUMMARY

          # Warning if usage is high
          if [ $USAGE_PERCENT -gt 80 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Warning**: Branch usage is above 80%!" >> $GITHUB_STEP_SUMMARY
            echo "Consider running manual cleanup or increasing branch limit." >> $GITHUB_STEP_SUMMARY
          fi
