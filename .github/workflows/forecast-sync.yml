name: Forecast Data Sync

# This workflow synchronizes forecast data after deployments and on schedule
on:
  # Trigger after successful Next.js deployments
  workflow_run:
    workflows: ["Deploy Next.js to Vercel with Manual Neon Setup"]
    types:
      - completed
    branches:
      - main
      - dev

  # Manual trigger
  workflow_dispatch:
    inputs:
      sync_type:
        description: 'Type of sync to perform'
        required: true
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full
      branch:
        description: 'Target branch for database sync'
        required: false
        default: ''
        type: string

  # Scheduled sync (every 6 hours)
  schedule:
    - cron: '0 */6 * * *'

env:
  AWS_REGION: us-east-2
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
  NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      branch_name: ${{ steps.env.outputs.branch_name }}
      database_url: ${{ steps.env.outputs.database_url }}
    steps:
      - name: Determine environment and branch
        id: env
        run: |
          # Determine environment based on trigger
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Triggered by deployment workflow
            if [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "branch_name=main" >> $GITHUB_OUTPUT
            else
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "branch_name=dev" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Scheduled run - sync both environments
            echo "environment=all" >> $GITHUB_OUTPUT
            echo "branch_name=all" >> $GITHUB_OUTPUT
          else
            # Manual trigger
            if [[ -n "${{ github.event.inputs.branch }}" ]]; then
              echo "branch_name=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
              if [[ "${{ github.event.inputs.branch }}" == "main" ]]; then
                echo "environment=production" >> $GITHUB_OUTPUT
              else
                echo "environment=dev" >> $GITHUB_OUTPUT
              fi
            else
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "branch_name=dev" >> $GITHUB_OUTPUT
            fi
          fi

  sync-forecast-data:
    name: Sync Forecast Data
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.environment != 'all'
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Neon database URL
        id: neon
        run: |
          # Get database URL for the target branch
          BRANCH_NAME="${{ needs.determine-environment.outputs.branch_name }}"

          # Use Neon API to get connection string
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ env.NEON_API_KEY }}" \
            "https://console.neon.tech/api/v2/projects/${{ env.NEON_PROJECT_ID }}/branches")

          # Find branch ID
          BRANCH_ID=$(echo "$RESPONSE" | jq -r ".branches[] | select(.name==\"$BRANCH_NAME\") | .id")

          if [[ -z "$BRANCH_ID" ]]; then
            echo "‚ùå Branch $BRANCH_NAME not found"
            exit 1
          fi

          # Get connection string
          CONN_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ env.NEON_API_KEY }}" \
            "https://console.neon.tech/api/v2/projects/${{ env.NEON_PROJECT_ID }}/branches/$BRANCH_ID/connection_string")

          DATABASE_URL=$(echo "$CONN_RESPONSE" | jq -r '.connection_string')
          echo "::add-mask::$DATABASE_URL"
          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: src/frontend/nextjs-app/package-lock.json

      - name: Install dependencies
        working-directory: src/frontend/nextjs-app
        run: npm ci

      - name: Run forecast data sync
        working-directory: src/frontend/nextjs-app
        env:
          DATABASE_URL: ${{ steps.neon.outputs.database_url }}
          SYNC_TYPE: ${{ github.event.inputs.sync_type || 'incremental' }}
        run: |
          echo "üîÑ Starting $SYNC_TYPE sync for ${{ needs.determine-environment.outputs.branch_name }} branch..."

          # Run the migration script
          npx tsx scripts/migrate-forecast-to-postgres.ts

          echo "‚úÖ Sync completed successfully"

      - name: Invoke Lambda for incremental sync
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.sync_type == 'incremental'
        run: |
          # Invoke Lambda function for ongoing incremental syncs
          FUNCTION_NAME="forecast-sync-${{ needs.determine-environment.outputs.environment }}"

          aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --invocation-type Event \
            --payload '{"source": "github.actions", "sync_type": "incremental", "branch": "${{ needs.determine-environment.outputs.branch_name }}"}' \
            response.json

          echo "üöÄ Lambda function invoked for incremental sync"

  sync-all-environments:
    name: Sync All Environments
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.environment == 'all'
    strategy:
      matrix:
        environment: [dev, production]
        include:
          - environment: dev
            branch: dev
          - environment: production
            branch: main
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Neon database URL
        id: neon
        run: |
          # Get database URL for the target branch
          BRANCH_NAME="${{ matrix.branch }}"

          # Use Neon API to get connection string
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ env.NEON_API_KEY }}" \
            "https://console.neon.tech/api/v2/projects/${{ env.NEON_PROJECT_ID }}/branches")

          # Find branch ID
          BRANCH_ID=$(echo "$RESPONSE" | jq -r ".branches[] | select(.name==\"$BRANCH_NAME\") | .id")

          if [[ -z "$BRANCH_ID" ]]; then
            echo "‚ùå Branch $BRANCH_NAME not found"
            exit 1
          fi

          # Get connection string
          CONN_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ env.NEON_API_KEY }}" \
            "https://console.neon.tech/api/v2/projects/${{ env.NEON_PROJECT_ID }}/branches/$BRANCH_ID/connection_string")

          DATABASE_URL=$(echo "$CONN_RESPONSE" | jq -r '.connection_string')
          echo "::add-mask::$DATABASE_URL"
          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT

      - name: Invoke Lambda for incremental sync
        run: |
          # Invoke Lambda function for ongoing incremental syncs
          FUNCTION_NAME="forecast-sync-${{ matrix.environment }}"

          aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --invocation-type Event \
            --payload '{"source": "github.actions", "sync_type": "incremental", "branch": "${{ matrix.branch }}"}' \
            response.json

          echo "üöÄ Lambda function invoked for ${{ matrix.environment }} environment"

  notify-sync-status:
    name: Notify Sync Status
    runs-on: ubuntu-latest
    needs: [sync-forecast-data, sync-all-environments]
    if: always() && (needs.sync-forecast-data.result != 'skipped' || needs.sync-all-environments.result != 'skipped')
    steps:
      - name: Send notification
        uses: actions/github-script@v7
        with:
          script: |
            const syncResult = '${{ needs.sync-forecast-data.result }}' || '${{ needs.sync-all-environments.result }}';
            const status = syncResult === 'success' ? '‚úÖ' : '‚ùå';
            const message = syncResult === 'success'
              ? 'Forecast data sync completed successfully'
              : 'Forecast data sync failed';

            console.log(`${status} ${message}`);

            // You can add additional notification logic here (Slack, email, etc.)
