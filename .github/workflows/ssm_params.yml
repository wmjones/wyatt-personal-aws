name: Configure SSM Parameters

on:
  # Trigger automatically after successful Terraform apply
  workflow_run:
    workflows: ["Terraform Apply"]
    types:
      - completed
    branches:
      - main
      - dev

  # Keep manual trigger option for testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to configure (dev or prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  contents: read   # Required for actions/checkout
  id-token: write  # Required for OIDC authentication

env:
  AWS_REGION: 'us-east-2'  # Update to match your AWS region
  TF_CLOUD_ORGANIZATION: "wyatt-personal-aws"
  TF_LOG: "INFO"

jobs:
  set-ssm-parameters:
    name: Configure Infrastructure & Application Parameters
    runs-on: ubuntu-latest
    # Only run if manually triggered OR if Terraform apply was successful
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "Manual trigger - Environment: ${{ github.event.inputs.environment }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Determine environment based on the branch that triggered Terraform apply
            if [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
              echo "environment=prod" >> $GITHUB_OUTPUT
              echo "Auto trigger from main branch - Environment: prod"
            else
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "Auto trigger from dev branch - Environment: dev"
            fi
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For workflow_run events, checkout the triggering branch
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use the shared github-actions-role (not environment-specific)
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          role-session-name: GitHubActionsDeployment
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Validate Terraform Version
        run: |
          TERRAFORM_VERSION=$(terraform version -json | jq -r '.terraform_version')
          echo "Using Terraform version: $TERRAFORM_VERSION"
          if ! terraform version | grep -q "v1\.[6-9]\|v[2-9]"; then
            echo "❌ Error: Terraform version >= 1.6.0 is required but found $TERRAFORM_VERSION"
            exit 1
          fi
          echo "✅ Terraform version check passed"

      - name: Verify AWS Identity
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity
          echo "AWS credentials configured successfully"

      - name: Set Terraform Workspace
        run: |
          # Set TF_WORKSPACE based on environment
          if [[ "${{ steps.env.outputs.environment }}" == "prod" ]]; then
            echo "TF_WORKSPACE=wyatt-personal-aws-prod" >> $GITHUB_ENV
          else
            echo "TF_WORKSPACE=wyatt-personal-aws-dev" >> $GITHUB_ENV
          fi
          echo "Set TF_WORKSPACE to: $TF_WORKSPACE"

      - name: Get Terraform outputs
        id: terraform-outputs
        run: |
          cd main

          # Initialize Terraform to access state
          echo "Initializing Terraform..."
          echo "Using workspace: $TF_WORKSPACE"
          if ! terraform init; then
            echo "❌ Error: Terraform init failed"
            exit 1
          fi
          echo "✅ Terraform initialized successfully"

          # Verify terraform state is accessible
          echo "Checking Terraform state..."
          if ! terraform show >/dev/null 2>&1; then
            echo "❌ Error: Cannot access Terraform state. Ensure Terraform apply completed successfully."
            exit 1
          fi
          echo "✅ Terraform state accessible"

          # Get outputs with error handling
          echo "Retrieving Terraform outputs..."
          USER_POOL_ID=$(terraform output -raw cognito_user_pool_id 2>/dev/null || echo "")
          CLIENT_ID=$(terraform output -raw cognito_client_id 2>/dev/null || echo "")
          API_ENDPOINT=$(terraform output -raw api_endpoint 2>/dev/null || echo "")

          # Log what was found
          echo "Terraform outputs retrieved:"
          echo "  - User Pool ID: ${USER_POOL_ID:-'(not found)'}"
          echo "  - Client ID: ${CLIENT_ID:-'(not found)'}"
          echo "  - API Endpoint: ${API_ENDPOINT:-'(not found)'}"

          # Store the values
          echo "user_pool_id=${USER_POOL_ID}" >> $GITHUB_OUTPUT
          echo "client_id=${CLIENT_ID}" >> $GITHUB_OUTPUT
          echo "api_endpoint=${API_ENDPOINT}" >> $GITHUB_OUTPUT

      - name: Set up S3 bucket parameter (SKIPPED - React app deprecated)
        run: |
          echo "⚠️  Skipping S3 frontend bucket parameter - React app has been deprecated in favor of Next.js on Vercel"
          echo "The frontend is now hosted on Vercel and does not require S3 bucket configuration"

      - name: Set up CloudFront distribution parameter (SKIPPED - React app deprecated)
        run: |
          echo "⚠️  Skipping CloudFront distribution parameter - React app has been deprecated in favor of Next.js on Vercel"
          echo "The frontend is now hosted on Vercel CDN and does not require CloudFront configuration"

      - name: Set up Cognito User Pool parameters
        run: |
          # Use Terraform output if available
          if [ -n "${{ steps.terraform-outputs.outputs.user_pool_id }}" ]; then
            USER_POOL_ID="${{ steps.terraform-outputs.outputs.user_pool_id }}"
            echo "Found User Pool ID: $USER_POOL_ID"

            # Store User Pool ID in SSM Parameter Store
            aws ssm put-parameter \
              --name "/wyatt-personal-aws-${{ steps.env.outputs.environment }}/cognito_user_pool_id" \
              --value "$USER_POOL_ID" \
              --type "String" \
              --overwrite

            echo "Cognito User Pool ID parameter set successfully"
          else
            echo "No User Pool ID found from Terraform outputs"
          fi

          # Use Terraform output if available
          if [ -n "${{ steps.terraform-outputs.outputs.client_id }}" ]; then
            CLIENT_ID="${{ steps.terraform-outputs.outputs.client_id }}"
            echo "Found Client ID: $CLIENT_ID"

            # Store Client ID in SSM Parameter Store
            aws ssm put-parameter \
              --name "/wyatt-personal-aws-${{ steps.env.outputs.environment }}/cognito_client_id" \
              --value "$CLIENT_ID" \
              --type "String" \
              --overwrite

            echo "Cognito Client ID parameter set successfully"
          else
            echo "No Client ID found from Terraform outputs"
          fi

      - name: Set up API Gateway endpoint parameter
        run: |
          # Use Terraform output if available
          if [ -n "${{ steps.terraform-outputs.outputs.api_endpoint }}" ]; then
            API_ENDPOINT="${{ steps.terraform-outputs.outputs.api_endpoint }}"
            echo "Found API Endpoint: $API_ENDPOINT"

            # Store API Endpoint in SSM Parameter Store
            aws ssm put-parameter \
              --name "/wyatt-personal-aws-${{ steps.env.outputs.environment }}/api_endpoint" \
              --value "$API_ENDPOINT" \
              --type "String" \
              --overwrite

            echo "API Endpoint parameter set successfully"
          else
            echo "No API Endpoint found from Terraform outputs"
          fi

      - name: Store Neon credentials in SSM
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
        run: |
          echo "Storing Neon configuration in SSM for ${ENVIRONMENT} environment..."

          # Store API key as SecureString
          aws ssm put-parameter \
            --name "/forecast-sync/${ENVIRONMENT}/neon-api-key" \
            --value "${{ secrets.NEON_API_KEY }}" \
            --type "SecureString" \
            --overwrite \
            --description "Neon API key for forecast sync Lambda" \
            --tags "Key=Environment,Value=${ENVIRONMENT}" "Key=Service,Value=forecast-sync" \
            || { echo "Failed to store Neon API key"; exit 1; }

          # Store project ID as regular String
          aws ssm put-parameter \
            --name "/forecast-sync/${ENVIRONMENT}/neon-project-id" \
            --value "${{ secrets.NEON_PROJECT_ID }}" \
            --type "String" \
            --overwrite \
            --description "Neon project ID for forecast sync Lambda" \
            --tags "Key=Environment,Value=${ENVIRONMENT}" "Key=Service,Value=forecast-sync" \
            || { echo "Failed to store Neon project ID"; exit 1; }

          echo "✅ Successfully stored Neon configuration in SSM for ${ENVIRONMENT} environment"

      - name: Verify SSM parameters
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
        run: |
          echo "Verifying stored parameters..."

          # Check infrastructure parameters
          echo "Infrastructure parameters:"
          aws ssm describe-parameters \
            --parameter-filters "Key=Name,Option=BeginsWith,Values=/wyatt-personal-aws-${ENVIRONMENT}/" \
            --query "Parameters[*].[Name,Type,LastModifiedDate]" \
            --output table

          # Check application parameters
          echo "Application parameters:"
          aws ssm describe-parameters \
            --parameter-filters "Key=Name,Option=BeginsWith,Values=/forecast-sync/${ENVIRONMENT}/" \
            --query "Parameters[*].[Name,Type,LastModifiedDate]" \
            --output table

          echo "✅ Parameter verification complete"

      - name: Deployment Summary
        run: |
          echo "## SSM Parameters Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ steps.env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "- **Triggered by**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Source branch**: ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Parameters Configured" >> $GITHUB_STEP_SUMMARY
          echo "**Infrastructure Parameters:**" >> $GITHUB_STEP_SUMMARY
          echo "- Cognito User Pool ID & Client ID" >> $GITHUB_STEP_SUMMARY
          echo "- API Gateway Endpoint" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application Parameters:**" >> $GITHUB_STEP_SUMMARY
          echo "- Neon API Key (SecureString)" >> $GITHUB_STEP_SUMMARY
          echo "- Neon Project ID" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All SSM parameters updated successfully for **${{ steps.env.outputs.environment }}** environment" >> $GITHUB_STEP_SUMMARY
