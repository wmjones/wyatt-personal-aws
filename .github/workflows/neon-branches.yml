name: Create/Delete Branch for Pull Request

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: read
  pull-requests: write

jobs:
  setup:
    name: Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

  create_neon_branch:
    name: Create Neon Branch
    outputs:
      db_url: ${{ steps.create_neon_branch_encode.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch_encode.outputs.db_url_with_pooler }}
    needs: setup
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Store connection strings
        run: |
          echo "Database URL available for testing"
          echo "Pooled connection: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}"

      - name: Add comment with database info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `üóÑÔ∏è **Neon Database Branch Created**

            Your preview database is ready! This branch includes all data from the parent branch.

            Branch Name: \`preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}\`

            To use this database in your local environment, add the following to your \`.env.local\`:
            \`\`\`
            DATABASE_URL="${{ steps.create_neon_branch.outputs.db_url_with_pooler }}"
            DATABASE_URL_UNPOOLED="${{ steps.create_neon_branch.outputs.db_url }}"
            \`\`\`

            Note: These URLs contain sensitive credentials. Do not commit them to the repository.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  update_vercel_env:
    name: Update Vercel Environment
    needs: create_neon_branch
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Update Vercel Preview Environment
        run: |
          # Update Vercel preview environment with the new database URL
          curl -X POST "https://api.vercel.com/v1/projects/${{ vars.VERCEL_PROJECT_ID }}/env" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "key": "DATABASE_URL",
              "value": "${{ needs.create_neon_branch.outputs.db_url_with_pooler }}",
              "type": "encrypted",
              "target": ["preview"],
              "gitBranch": "${{ needs.setup.outputs.branch }}"
            }'

          curl -X POST "https://api.vercel.com/v1/projects/${{ vars.VERCEL_PROJECT_ID }}/env" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "key": "DATABASE_URL_UNPOOLED",
              "value": "${{ needs.create_neon_branch.outputs.db_url }}",
              "type": "encrypted",
              "target": ["preview"],
              "gitBranch": "${{ needs.setup.outputs.branch }}"
            }'

  delete_neon_branch:
    name: Delete Neon Branch
    needs: setup
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Add comment about deletion
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `üóëÔ∏è **Neon Database Branch Deleted**

            The preview database branch \`preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}\` has been deleted.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
