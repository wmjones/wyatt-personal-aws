name: Terraform Drift Detection

on:
  schedule:
    # Run every 6 hours for more frequent monitoring
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check (dev/prod/all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - dev
          - prod
      fix_drift:
        description: 'Attempt to fix detected drift (requires approval)'
        required: false
        type: boolean
        default: false
  pull_request:
    paths:
      - 'main/**/*.tf'
      - '.github/workflows/drift-detection.yml'

env:
  TF_CLOUD_ORGANIZATION: "wyatt-personal-aws"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_LOG: "INFO"

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  setup:
    name: Setup Drift Detection
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-matrix.outputs.environments }}
      timestamp: ${{ steps.set-matrix.outputs.timestamp }}
    steps:
      - name: Determine Environments
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
            echo "environments=[\"dev\"]" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "environments=[\"prod\"]" >> $GITHUB_OUTPUT
          else
            echo "environments=[\"dev\", \"prod\"]" >> $GITHUB_OUTPUT
          fi
          echo "timestamp=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

  deployment-packages:
    name: Build Deployment Packages
    uses: ./.github/workflows/deployment_package_zip.yml

  drift-detection:
    name: Check ${{ matrix.environment }} Environment
    needs: [setup, deployment-packages]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    env:
      TF_WORKSPACE: wyatt-personal-aws-${{ matrix.environment }}
    outputs:
      drift_detected: ${{ steps.check-drift.outputs.drift_detected }}
      plan_url: ${{ steps.plan-run.outputs.run_link }}
      changes_summary: ${{ steps.check-drift.outputs.changes_summary }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Python deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./main/

      - name: Download Athena Lambda package
        uses: actions/download-artifact@v4
        with:
          name: athena-lambda-package
          path: ./main/

      - name: Download Forecast Sync Lambda package
        uses: actions/download-artifact@v4
        with:
          name: forecast-sync-lambda-package
          path: ./main/

      - name: Cache Terraform Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ./main/.terraform
          key: ${{ runner.os }}-terraform-${{ matrix.environment }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ matrix.environment }}-
            ${{ runner.os }}-terraform-

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ./main
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: true
          message: "Drift Detection Run - ${{ needs.setup.outputs.timestamp }}"

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Check for Drift
        id: check-drift
        run: |
          ADD="${{ steps.plan-output.outputs.add }}"
          CHANGE="${{ steps.plan-output.outputs.change }}"
          DESTROY="${{ steps.plan-output.outputs.destroy }}"

          if [[ "$ADD" == "0" && "$CHANGE" == "0" && "$DESTROY" == "0" ]]; then
            echo "✅ No drift detected in ${{ matrix.environment }}"
            echo "drift_detected=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Drift detected in ${{ matrix.environment }}!"
            echo "drift_detected=true" >> $GITHUB_OUTPUT

            SUMMARY="Resources to add: $ADD, change: $CHANGE, destroy: $DESTROY"
            echo "changes_summary=$SUMMARY" >> $GITHUB_OUTPUT

            # Set environment-specific output for reporting
            echo "drift_${{ matrix.environment }}=true" >> $GITHUB_ENV
          fi

      - name: Export Drift Details
        if: steps.check-drift.outputs.drift_detected == 'true'
        run: |
          # Create drift report directory
          mkdir -p drift-reports

          # Save drift summary
          cat > drift-reports/${{ matrix.environment }}-summary.json << EOF
          {
            "environment": "${{ matrix.environment }}",
            "timestamp": "${{ needs.setup.outputs.timestamp }}",
            "drift_detected": true,
            "changes": {
              "add": ${{ steps.plan-output.outputs.add }},
              "change": ${{ steps.plan-output.outputs.change }},
              "destroy": ${{ steps.plan-output.outputs.destroy }}
            },
            "plan_url": "${{ steps.plan-run.outputs.run_link }}"
          }
          EOF

      - name: Upload Drift Report
        if: steps.check-drift.outputs.drift_detected == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: drift-reports-${{ needs.setup.outputs.timestamp }}
          path: drift-reports/
          retention-days: 30

  create-issue:
    name: Create Drift Report Issue
    needs: [setup, drift-detection]
    runs-on: ubuntu-latest
    if: contains(needs.drift-detection.outputs.drift_detected, 'true')
    steps:
      - name: Download Drift Reports
        uses: actions/download-artifact@v4
        with:
          name: drift-reports-${{ needs.setup.outputs.timestamp }}
          path: ./drift-reports

      - name: Create or Update Issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const title = `Terraform State Drift Detected - ${new Date().toISOString().split('T')[0]}`;

            let body = '## 🔍 Terraform State Drift Report\n\n';
            body += `**Detection Time**: ${new Date().toISOString()}\n`;
            body += `**Workflow Run**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;

            // Read drift reports
            const reports = fs.readdirSync('./drift-reports')
              .filter(f => f.endsWith('-summary.json'))
              .map(f => JSON.parse(fs.readFileSync(`./drift-reports/${f}`, 'utf8')));

            // Add environment-specific details
            for (const report of reports) {
              const emoji = report.environment === 'prod' ? '🚨' : '⚠️';
              body += `### ${emoji} ${report.environment.toUpperCase()} Environment\n`;
              body += `- **Resources to Add**: ${report.changes.add}\n`;
              body += `- **Resources to Change**: ${report.changes.change}\n`;
              body += `- **Resources to Destroy**: ${report.changes.destroy}\n`;
              body += `- **[View Terraform Plan](${report.plan_url})**\n\n`;
            }

            body += '## 📋 Action Required\n\n';
            body += '1. Review the drift details in the Terraform Cloud plans linked above\n';
            body += '2. Determine if the drift is expected or unexpected\n';
            body += '3. If unexpected, investigate the cause (manual changes, failed deployments, etc.)\n';
            body += '4. Apply fixes using one of these methods:\n';
            body += '   - Run the drift detection workflow with `fix_drift: true`\n';
            body += '   - Create a PR with necessary changes\n';
            body += '   - Use `terraform import` for resources created outside Terraform\n\n';

            body += '## 🔧 Quick Actions\n\n';
            body += '- [Run Drift Fix Workflow](';
            body += `${{ github.server_url }}/${{ github.repository }}/actions/workflows/drift-detection.yml`;
            body += ')\n';
            body += '- [View Terraform Cloud Workspaces](https://app.terraform.io/app/wyatt-personal-aws/workspaces)\n';

            // Check for existing open drift issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['terraform-drift', 'infrastructure'],
              state: 'open'
            });

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });

              // Add a comment about the new detection
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `🔄 Updated with new drift detection results from workflow run [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['terraform-drift', 'infrastructure', 'automated']
              });
            }

  slack-notification:
    name: Send Slack Notification
    needs: [drift-detection]
    runs-on: ubuntu-latest
    if: contains(needs.drift-detection.outputs.drift_detected, 'true') && vars.SLACK_WEBHOOK_URL != ''
    steps:
      - name: Send Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Determine severity based on environments
          if [[ "${{ contains(needs.drift-detection.outputs.*, 'prod') }}" == "true" ]]; then
            EMOJI="🚨"
            SEVERITY="CRITICAL"
            COLOR="danger"
          else
            EMOJI="⚠️"
            SEVERITY="Warning"
            COLOR="warning"
          fi

          # Create Slack message
          cat > message.json << EOF
          {
            "attachments": [{
              "color": "$COLOR",
              "title": "$EMOJI Terraform Drift Detected",
              "text": "$SEVERITY: State drift detected in infrastructure",
              "fields": [
                {
                  "title": "Environments Affected",
                  "value": "${{ join(needs.drift-detection.outputs.*, ', ') }}",
                  "short": true
                },
                {
                  "title": "Action Required",
                  "value": "Review GitHub Issue for details",
                  "short": true
                }
              ],
              "actions": [
                {
                  "type": "button",
                  "text": "View Workflow",
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              ]
            }]
          }
          EOF

          curl -X POST -H 'Content-type: application/json' \
            --data @message.json \
            $SLACK_WEBHOOK_URL || true

  apply-fixes:
    name: Apply Drift Fixes
    needs: [drift-detection]
    if: github.event.inputs.fix_drift == 'true' && contains(needs.drift-detection.outputs.drift_detected, 'true')
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}-drift-fix  # Requires manual approval
    strategy:
      matrix:
        environment: ${{ fromJson(needs.setup.outputs.environments) }}
    steps:
      - name: Apply Changes
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        with:
          run: ${{ needs.drift-detection.outputs.run_id[matrix.environment] }}
          comment: "Auto-fixing drift in ${{ matrix.environment }} environment"
