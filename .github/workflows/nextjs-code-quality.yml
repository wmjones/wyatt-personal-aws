name: Next.js Code Quality Checks

# This workflow runs linting and type checking for Next.js PRs
# Deployment is handled automatically by Vercel's GitHub integration
# Neon database branches are created automatically by the Neon-Vercel integration

on:
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'src/frontend/nextjs-app/**'
      - '.github/workflows/nextjs-code-quality.yml'

# Concurrency control to prevent multiple checks for the same PR
concurrency:
  group: pr-checks-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: src/frontend/nextjs-app/package-lock.json

      # Step 3: Install dependencies
      - name: Install dependencies
        working-directory: src/frontend/nextjs-app
        run: npm ci

      # Step 4: Run linter
      - name: Run linter
        id: lint
        working-directory: src/frontend/nextjs-app
        run: npm run lint
        continue-on-error: true

      # Step 5: Run type check
      - name: Run type check
        id: typecheck
        working-directory: src/frontend/nextjs-app
        run: npx tsc --noEmit
        continue-on-error: true

      # Step 6: Comment on PR with results
      - name: Comment PR with Check Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const lintSuccess = '${{ steps.lint.outcome }}' === 'success';
            const typeSuccess = '${{ steps.typecheck.outcome }}' === 'success';
            
            let body = '## 🔍 Code Quality Check Results\n\n';
            body += `- Linting: ${lintSuccess ? '✅ Passed' : '❌ Failed'}\n`;
            body += `- Type Check: ${typeSuccess ? '✅ Passed' : '❌ Failed'}\n\n`;
            
            if (lintSuccess && typeSuccess) {
              body += '✨ All checks passed! Your code is ready for review.';
            } else {
              body += '⚠️ Please fix the issues above before merging.';
            }
            
            body += '\n\n---\n';
            body += '💡 **Note**: Preview deployments are handled automatically by Vercel.\n';
            body += 'Database branches are created automatically by the Neon integration.';

            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Code Quality Check Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      # Step 7: Fail the check if either lint or type check failed
      - name: Check results
        if: steps.lint.outcome == 'failure' || steps.typecheck.outcome == 'failure'
        run: exit 1