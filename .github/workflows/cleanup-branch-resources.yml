name: Cleanup Branch Resources

# This workflow cleans up Vercel environment variables and Neon database branches
# when a GitHub branch is deleted or merged

on:
  delete:
    # Triggered when a branch is deleted
  pull_request:
    types: [closed]
    # Triggered when a PR is closed (either merged or closed without merging)

env:
  VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID || secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID || secrets.VERCEL_PROJECT_ID }}

jobs:
  cleanup-branch-resources:
    name: Cleanup Branch Resources
    runs-on: ubuntu-latest
    # Only run if it's a branch deletion or a merged PR
    if: |
      github.event_name == 'delete' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      # Step 1: Determine branch name to clean up
      - name: Determine branch name
        id: branch_name
        run: |
          if [[ "${{ github.event_name }}" == "delete" ]]; then
            # For delete events, use the ref
            BRANCH_NAME="${{ github.event.ref }}"
          else
            # For merged PRs, use the head branch
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch to clean up: $BRANCH_NAME"

          # Skip cleanup for protected branches
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "dev" ]]; then
            echo "‚ö†Ô∏è Skipping cleanup for protected branch: $BRANCH_NAME"
            echo "skip_cleanup=true" >> $GITHUB_OUTPUT
          else
            echo "skip_cleanup=false" >> $GITHUB_OUTPUT
          fi

      # Step 2: Sanitize branch name (same logic as in deployment workflow)
      - name: Sanitize branch name
        if: steps.branch_name.outputs.skip_cleanup == 'false'
        id: sanitize_branch
        run: |
          # Sanitize branch name for Neon (same as deployment workflow)
          SANITIZED_BRANCH=$(echo "${{ steps.branch_name.outputs.branch_name }}" | sed 's/[^a-zA-Z0-9.-]/-/g' | tr '[:upper:]' '[:lower:]')
          # Remove leading/trailing hyphens and limit length to 63 chars
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/^-\+\|-\+$//g' | cut -c1-63)
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "Sanitized branch name: $SANITIZED_BRANCH"

      # Step 3: Skip Vercel Environment Variables Cleanup
      # This project is not Git-connected, so branch-specific env vars are not used
      - name: Skip Vercel Environment Variables Cleanup
        if: steps.branch_name.outputs.skip_cleanup == 'false'
        run: |
          echo "‚ÑπÔ∏è Skipping Vercel environment variable cleanup"
          echo "This project is not Git-connected to Vercel"
          echo "Environment variables are passed at deployment time, not stored persistently"
          echo "Branch: ${{ steps.branch_name.outputs.branch_name }}"

      # Step 4: Delete Neon database branch
      - name: Delete Neon database branch
        if: steps.branch_name.outputs.skip_cleanup == 'false'
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          echo "üóÑÔ∏è Checking for Neon database branch: branch/${{ steps.sanitize_branch.outputs.sanitized_branch }}"

          # Get all branches for the project
          BRANCHES_RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.NEON_API_KEY }}" \
            "https://console.neon.tech/api/v2/projects/${{ secrets.NEON_PROJECT_ID }}/branches")

          # Find the branch ID for our branch
          BRANCH_ID=$(echo "$BRANCHES_RESPONSE" | jq -r ".branches[] | select(.name==\"branch/${{ steps.sanitize_branch.outputs.sanitized_branch }}\") | .id")

          if [ -n "$BRANCH_ID" ] && [ "$BRANCH_ID" != "null" ]; then
            echo "Found Neon branch with ID: $BRANCH_ID"

            # Delete the branch
            DELETE_RESPONSE=$(curl -s -X DELETE \
              -H "Authorization: Bearer ${{ secrets.NEON_API_KEY }}" \
              "https://console.neon.tech/api/v2/projects/${{ secrets.NEON_PROJECT_ID }}/branches/$BRANCH_ID")

            # Check if deletion was successful
            if [ $? -eq 0 ]; then
              echo "‚úÖ Successfully deleted Neon database branch"
            else
              echo "‚ùå Failed to delete Neon database branch"
              echo "Response: $DELETE_RESPONSE"
            fi
          else
            echo "‚ÑπÔ∏è No Neon database branch found for: branch/${{ steps.sanitize_branch.outputs.sanitized_branch }}"
          fi

      # Step 5: Log cleanup summary
      - name: Cleanup summary
        if: steps.branch_name.outputs.skip_cleanup == 'false'
        run: |
          echo "## üßπ Branch Cleanup Complete"
          echo "Branch: ${{ steps.branch_name.outputs.branch_name }}"
          echo "Event: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR: #${{ github.event.pull_request.number }}"
          fi
          echo ""
          echo "Resources cleaned:"
          echo "- Vercel environment variables (N/A - non-Git-connected project)"
          echo "- Neon database branch deleted (if existed)"
          echo ""
          echo "This cleanup helps prevent resource accumulation and maintains a clean development environment."

      # Step 6: Handle cleanup errors
      - name: Handle cleanup errors
        if: failure() && steps.branch_name.outputs.skip_cleanup == 'false'
        run: |
          echo "‚ö†Ô∏è Branch cleanup encountered errors"
          echo "Some resources may need manual cleanup:"
          echo "- Check Neon console for orphaned database branches"
          echo "Note: Vercel env vars are deployment-specific (non-Git-connected project)"
          echo ""
          echo "Branch: ${{ steps.branch_name.outputs.branch_name }}"
          echo "Sanitized: ${{ steps.sanitize_branch.outputs.sanitized_branch }}"
